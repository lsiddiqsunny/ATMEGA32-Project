
RFID data to arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000602  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000137  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <URAT_SETUP>:

 //header to enable delay function in program

 void URAT_SETUP(){
 
	UCSRA = 0b00000010;  // Double speed
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0b00011000;  // Enable Tx and Rx, polling
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;  // Asynchronous mode, no parity, 1 stop bit,8 data bits
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
 
	UBRRH = 0;
  78:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; // Baud rate 9600bps, assuming 1MHz clock
  7a:	8c e0       	ldi	r24, 0x0C	; 12
  7c:	89 b9       	out	0x09, r24	; 9
  7e:	08 95       	ret

00000080 <URAT_RECEIVE>:

 }

 char URAT_RECEIVE(){
	while ((UCSRA & (1<<RXC)) == 0x00);// Wait until RXC flag is set to logic 1
  80:	5f 9b       	sbis	0x0b, 7	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <URAT_RECEIVE>
	unsigned char ch= UDR;
  84:	8c b1       	in	r24, 0x0c	; 12
	return ch;
 }
  86:	08 95       	ret

00000088 <URAT_SEND>:

 void URAT_SEND(unsigned char ch){
  while (! (UCSRA & (1 << UDRE)) );// wait until UDRE flag is set to logic 1
  88:	5d 9b       	sbis	0x0b, 5	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <URAT_SEND>
  UDR=ch;
  8c:	8c b9       	out	0x0c, r24	; 12
  8e:	08 95       	ret

00000090 <main>:
  return ;
 }

 int main(void)

 {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	2c 97       	sbiw	r28, 0x0c	; 12
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61

	 URAT_SETUP();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <URAT_SETUP>
  a8:	6e 01       	movw	r12, r28
  aa:	2d e0       	ldi	r18, 0x0D	; 13
  ac:	c2 0e       	add	r12, r18
  ae:	d1 1c       	adc	r13, r1
	 unsigned char var[12];
	 while (1)
	{
	unsigned char c=URAT_RECEIVE();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <URAT_RECEIVE>
	 while(c==2){
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	c1 f1       	breq	.+112    	; 0x128 <main+0x98>
  b8:	fb cf       	rjmp	.-10     	; 0xb0 <main+0x20>

	 int co=0;
	 while(c!=3 && co!=12){
	   c=URAT_RECEIVE();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <URAT_RECEIVE>
  be:	18 2f       	mov	r17, r24
	   if(((c<='F' && c>='A')||(c<='9' && c>='0')) && co<12){
  c0:	8f eb       	ldi	r24, 0xBF	; 191
  c2:	81 0f       	add	r24, r17
  c4:	86 30       	cpi	r24, 0x06	; 6
  c6:	20 f0       	brcs	.+8      	; 0xd0 <main+0x40>
  c8:	80 ed       	ldi	r24, 0xD0	; 208
  ca:	81 0f       	add	r24, r17
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	70 f4       	brcc	.+28     	; 0xec <main+0x5c>
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	e8 16       	cp	r14, r24
  d4:	f1 04       	cpc	r15, r1
  d6:	54 f4       	brge	.+20     	; 0xec <main+0x5c>
			var[co]=c;
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	ee 0d       	add	r30, r14
  e2:	ff 1d       	adc	r31, r15
  e4:	10 83       	st	Z, r17
			co++;
  e6:	9f ef       	ldi	r25, 0xFF	; 255
  e8:	e9 1a       	sub	r14, r25
  ea:	f9 0a       	sbc	r15, r25
	{
	unsigned char c=URAT_RECEIVE();
	 while(c==2){

	 int co=0;
	 while(c!=3 && co!=12){
  ec:	13 30       	cpi	r17, 0x03	; 3
  ee:	21 f4       	brne	.+8      	; 0xf8 <main+0x68>
  f0:	fe 01       	movw	r30, r28
  f2:	31 96       	adiw	r30, 0x01	; 1
  f4:	7f 01       	movw	r14, r30
  f6:	05 c0       	rjmp	.+10     	; 0x102 <main+0x72>
  f8:	fc e0       	ldi	r31, 0x0C	; 12
  fa:	ef 16       	cp	r14, r31
  fc:	f1 04       	cpc	r15, r1
  fe:	e9 f6       	brne	.-70     	; 0xba <main+0x2a>
 100:	f7 cf       	rjmp	.-18     	; 0xf0 <main+0x60>
	   if(((c<='F' && c>='A')||(c<='9' && c>='0')) && co<12){
			var[co]=c;
			co++;
	   }
	 }
	 for(int i=0;i<12;i++) URAT_SEND(var[i]);
 102:	f7 01       	movw	r30, r14
 104:	81 91       	ld	r24, Z+
 106:	7f 01       	movw	r14, r30
 108:	0e 94 44 00 	call	0x88	; 0x88 <URAT_SEND>
 10c:	ec 14       	cp	r14, r12
 10e:	fd 04       	cpc	r15, r13
 110:	c1 f7       	brne	.-16     	; 0x102 <main+0x72>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	ff e3       	ldi	r31, 0x3F	; 63
 114:	2d e0       	ldi	r18, 0x0D	; 13
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	f1 50       	subi	r31, 0x01	; 1
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x88>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x92>
 122:	00 00       	nop
	 URAT_SETUP();
	 unsigned char var[12];
	 while (1)
	{
	unsigned char c=URAT_RECEIVE();
	 while(c==2){
 124:	12 30       	cpi	r17, 0x02	; 2
 126:	21 f6       	brne	.-120    	; 0xb0 <main+0x20>
  return ;
 }

 int main(void)

 {
 128:	e1 2c       	mov	r14, r1
 12a:	f1 2c       	mov	r15, r1
 12c:	c6 cf       	rjmp	.-116    	; 0xba <main+0x2a>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>

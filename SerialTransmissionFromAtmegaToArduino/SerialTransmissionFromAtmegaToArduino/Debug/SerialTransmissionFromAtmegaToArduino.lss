
SerialTransmissionFromAtmegaToArduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006af  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a9  00000000  00000000  0000151b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

 

 int main(void)

 {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61

 char data[]="hello";
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
 char nodata[]="bye";
  a8:	82 e6       	ldi	r24, 0x62	; 98
  aa:	99 e7       	ldi	r25, 0x79	; 121
  ac:	98 87       	std	Y+8, r25	; 0x08
  ae:	8f 83       	std	Y+7, r24	; 0x07
  b0:	85 e6       	ldi	r24, 0x65	; 101
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9a 87       	std	Y+10, r25	; 0x0a
  b6:	89 87       	std	Y+9, r24	; 0x09
	 DDRB =0x00;//PORTB is set as INPUT
  b8:	17 ba       	out	0x17, r1	; 23
	 DDRA=0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
	 DDRD=0xFF;
  be:	81 bb       	out	0x11, r24	; 17


	UCSRA = 0b00000000;  // double speed
  c0:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0b00011000;  // Enable Tx and Rx, polling
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;  // Async mode, no parity, 1 stop bit, 				8 data bits
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = 0x00;
  ca:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x33; // Baud rate 1200bps, assuming 1MHz clock
  cc:	83 e3       	ldi	r24, 0x33	; 51
  ce:	89 b9       	out	0x09, r24	; 9
	
	PORTA=0;
  d0:	1b ba       	out	0x1b, r1	; 27
  d2:	ae 01       	movw	r20, r28
  d4:	46 5f       	subi	r20, 0xF6	; 246
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
  d8:	9e 01       	movw	r18, r28
  da:	2a 5f       	subi	r18, 0xFA	; 250
  dc:	3f 4f       	sbci	r19, 0xFF	; 255

	 while (1)

	 {

		 if (PINB&0b00000001)//once button is pressed
  de:	b0 9b       	sbis	0x16, 0	; 22
  e0:	13 c0       	rjmp	.+38     	; 0x108 <main+0x86>
  e2:	fe 01       	movw	r30, r28
  e4:	31 96       	adiw	r30, 0x01	; 1

				 UDR = 1;

			 }*/
			 for(int i=0;i<5;i++){
			 while (! (UCSRA & (1 << UDRE)) );
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x64>
			 UDR=data[i];
  ea:	81 91       	ld	r24, Z+
  ec:	8c b9       	out	0x0c, r24	; 12
			 {

				 UDR = 1;

			 }*/
			 for(int i=0;i<5;i++){
  ee:	2e 17       	cp	r18, r30
  f0:	3f 07       	cpc	r19, r31
  f2:	c9 f7       	brne	.-14     	; 0xe6 <main+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	6f e3       	ldi	r22, 0x3F	; 63
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	61 50       	subi	r22, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x78>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x82>
 104:	00 00       	nop
 106:	eb cf       	rjmp	.-42     	; 0xde <main+0x5c>
 108:	fe 01       	movw	r30, r28
 10a:	37 96       	adiw	r30, 0x07	; 7
			 UDR = 0;

		 }
		 */
		 for(int i=0;i<3;i++){
			 while (! (UCSRA & (1 << UDRE)) );
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <main+0x8a>
			 UDR=nodata[i];
 110:	81 91       	ld	r24, Z+
 112:	8c b9       	out	0x0c, r24	; 12

			 UDR = 0;

		 }
		 */
		 for(int i=0;i<3;i++){
 114:	4e 17       	cp	r20, r30
 116:	5f 07       	cpc	r21, r31
 118:	c9 f7       	brne	.-14     	; 0x10c <main+0x8a>
 11a:	6f e3       	ldi	r22, 0x3F	; 63
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	61 50       	subi	r22, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x9e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xa8>
 12a:	00 00       	nop
 12c:	d8 cf       	rjmp	.-80     	; 0xde <main+0x5c>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>


SerialTransmissionFromAtmegaToArduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b2  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 49 00 	call	0x92	; 0x92 <main>
  7a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <URAT_RECEIVE>:
	UBRRL = 0x33; // Baud rate 1200bps, assuming 1MHz clock

 }

 char URAT_RECEIVE(){
	while ((UCSRA & (1<<RXC)) == 0x00);// Wait until RXC flag is set to logic 1
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <URAT_RECEIVE>
	unsigned char ch= UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
	return ch;
 }
  88:	08 95       	ret

0000008a <URAT_SEND>:

 void URAT_SEND(char ch){
  while (! (UCSRA & (1 << UDRE)) );// wait until UDRE flag is set to logic 1
  8a:	5d 9b       	sbis	0x0b, 5	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <URAT_SEND>
  UDR=ch;
  8e:	8c b9       	out	0x0c, r24	; 12
  90:	08 95       	ret

00000092 <main>:
  return ;
 }

 int main(void)

 {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62

 char data[]="hello";
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
 char nodata[]="bye";
  b2:	b0 90 66 00 	lds	r11, 0x0066	; 0x800066 <__data_start+0x6>
  b6:	c0 90 67 00 	lds	r12, 0x0067	; 0x800067 <__data_start+0x7>
  ba:	d0 90 68 00 	lds	r13, 0x0068	; 0x800068 <__data_start+0x8>
	 DDRB =0x00;//PORTB is set as INPUT
  be:	17 ba       	out	0x17, r1	; 23
	 DDRA=0xFF;//PORTA is set as OUTPUT
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	7e 01       	movw	r14, r28
  c6:	26 e0       	ldi	r18, 0x06	; 6
  c8:	e2 0e       	add	r14, r18
  ca:	f1 1c       	adc	r15, r1
		 
			_delay_ms(1000);
		 }
		unsigned char ch=URAT_RECEIVE();//If received data is 'e' ,then turn on the led
		if(ch=='e'){
			PORTA=1;
  cc:	aa 24       	eor	r10, r10
  ce:	a3 94       	inc	r10
	 DDRA=0xFF;//PORTA is set as OUTPUT
	 while (1)

	 {

		 if (PINB&1)//once button is pressed
  d0:	b0 9b       	sbis	0x16, 0	; 22
  d2:	15 c0       	rjmp	.+42     	; 0xfe <main+0x6c>
  d4:	8e 01       	movw	r16, r28
  d6:	0f 5f       	subi	r16, 0xFF	; 255
  d8:	1f 4f       	sbci	r17, 0xFF	; 255

		 {
			for(int i=0;i<5;i++){
				 URAT_SEND(data[i]);
  da:	f8 01       	movw	r30, r16
  dc:	81 91       	ld	r24, Z+
  de:	8f 01       	movw	r16, r30
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <URAT_SEND>
	 {

		 if (PINB&1)//once button is pressed

		 {
			for(int i=0;i<5;i++){
  e4:	0e 15       	cp	r16, r14
  e6:	1f 05       	cpc	r17, r15
  e8:	c1 f7       	brne	.-16     	; 0xda <main+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ff e3       	ldi	r31, 0x3F	; 63
  ec:	2d e0       	ldi	r18, 0x0D	; 13
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	f1 50       	subi	r31, 0x01	; 1
  f2:	20 40       	sbci	r18, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x5e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x68>
  fa:	00 00       	nop
  fc:	12 c0       	rjmp	.+36     	; 0x122 <main+0x90>

		 }
		 else{
		
			for(int i=0;i<3;i++){
				URAT_SEND(nodata[i]);
  fe:	8b 2d       	mov	r24, r11
 100:	0e 94 45 00 	call	0x8a	; 0x8a <URAT_SEND>
 104:	8c 2d       	mov	r24, r12
 106:	0e 94 45 00 	call	0x8a	; 0x8a <URAT_SEND>
 10a:	8d 2d       	mov	r24, r13
 10c:	0e 94 45 00 	call	0x8a	; 0x8a <URAT_SEND>
 110:	9f e3       	ldi	r25, 0x3F	; 63
 112:	ed e0       	ldi	r30, 0x0D	; 13
 114:	f3 e0       	ldi	r31, 0x03	; 3
 116:	91 50       	subi	r25, 0x01	; 1
 118:	e0 40       	sbci	r30, 0x00	; 0
 11a:	f0 40       	sbci	r31, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x84>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x8e>
 120:	00 00       	nop
			}
		 
			_delay_ms(1000);
		 }
		unsigned char ch=URAT_RECEIVE();//If received data is 'e' ,then turn on the led
 122:	0e 94 41 00 	call	0x82	; 0x82 <URAT_RECEIVE>
		if(ch=='e'){
 126:	85 36       	cpi	r24, 0x65	; 101
 128:	59 f4       	brne	.+22     	; 0x140 <main+0xae>
			PORTA=1;
 12a:	ab ba       	out	0x1b, r10	; 27
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0xa0>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0xaa>
 13c:	00 00       	nop
 13e:	c8 cf       	rjmp	.-112    	; 0xd0 <main+0x3e>
			_delay_ms(1000);
		} 
		else 
			PORTA=0;
 140:	1b ba       	out	0x1b, r1	; 27
 142:	c6 cf       	rjmp	.-116    	; 0xd0 <main+0x3e>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>

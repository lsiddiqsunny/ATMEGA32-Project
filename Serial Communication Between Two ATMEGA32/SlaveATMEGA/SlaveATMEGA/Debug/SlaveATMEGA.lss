
SlaveATMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067f  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ec  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <URAT_SETUP>:
	return ch;
}

void URAT_SEND(char ch){
	while (! (UCSRA & (1 << UDRE)) );// wait until UDRE flag is set to logic 1
	UDR=ch;
  6c:	1b b8       	out	0x0b, r1	; 11
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
  76:	10 bc       	out	0x20, r1	; 32
  78:	83 e3       	ldi	r24, 0x33	; 51
  7a:	89 b9       	out	0x09, r24	; 9
  7c:	08 95       	ret

0000007e <URAT_RECEIVE>:
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <URAT_RECEIVE>
  82:	8c b1       	in	r24, 0x0c	; 12
  84:	08 95       	ret

00000086 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRA=0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00;
  8a:	17 ba       	out	0x17, r1	; 23
	URAT_SETUP();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <URAT_SETUP>
	char ch= 0b11110000;
    while (1) 
    {
		if(URAT_RECEIVE()==ch){
  90:	0e 94 3f 00 	call	0x7e	; 0x7e <URAT_RECEIVE>
  94:	80 3f       	cpi	r24, 0xF0	; 240
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0xa>
			PORTA=~PORTA;
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	80 95       	com	r24
  9c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e4       	ldi	r24, 0x4F	; 79
  a0:	93 ec       	ldi	r25, 0xC3	; 195
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x1c>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x22>
  a8:	00 00       	nop
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0xa>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

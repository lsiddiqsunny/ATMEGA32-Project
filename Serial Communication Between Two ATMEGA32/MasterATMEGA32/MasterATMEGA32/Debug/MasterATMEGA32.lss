
MasterATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000686  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000603  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <URAT_SETUP>:

 char URAT_RECEIVE(){
	 while ((UCSRA & (1<<RXC)) == 0x00);// Wait until RXC flag is set to logic 1
	 unsigned char ch= UDR;
	 return ch;
 }
  6c:	1b b8       	out	0x0b, r1	; 11
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
  76:	10 bc       	out	0x20, r1	; 32
  78:	83 e3       	ldi	r24, 0x33	; 51
  7a:	89 b9       	out	0x09, r24	; 9
  7c:	08 95       	ret

0000007e <URAT_SEND>:

 void URAT_SEND(char ch){
	 while (! (UCSRA & (1 << UDRE)) );// wait until UDRE flag is set to logic 1
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <URAT_SEND>
	 UDR=ch;
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB=0x00;
  86:	17 ba       	out	0x17, r1	; 23
	DDRA=0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	URAT_SETUP();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <URAT_SETUP>
	char ch= 0b11110000;
    while (1) 
    {
		if(PINB&1){
  90:	b0 9b       	sbis	0x16, 0	; 22
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0xa>
		URAT_SEND(ch);
  94:	80 ef       	ldi	r24, 0xF0	; 240
  96:	0e 94 3f 00 	call	0x7e	; 0x7e <URAT_SEND>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e4       	ldi	r24, 0x4F	; 79
  9c:	93 ec       	ldi	r25, 0xC3	; 195
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x18>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1e>
  a4:	00 00       	nop
  a6:	f4 cf       	rjmp	.-24     	; 0x90 <main+0xa>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
